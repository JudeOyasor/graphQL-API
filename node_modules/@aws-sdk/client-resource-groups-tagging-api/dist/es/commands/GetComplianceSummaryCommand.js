import { __extends } from "tslib";
import { GetComplianceSummaryInput, GetComplianceSummaryOutput } from "../models/models_0";
import { deserializeAws_json1_1GetComplianceSummaryCommand, serializeAws_json1_1GetComplianceSummaryCommand, } from "../protocols/Aws_json1_1";
import { getSerdePlugin } from "@aws-sdk/middleware-serde";
import { Command as $Command } from "@aws-sdk/smithy-client";
/**
 * <p>Returns a table that shows counts of resources that are noncompliant with their tag
 *             policies.</p>
 *         <p>For more information on tag policies, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">Tag Policies</a> in
 *             the <i>AWS Organizations User Guide.</i>
 *          </p>
 *         <p>You can call this operation only from the organization's master account and from the us-east-1 Region.</p>
 */
var GetComplianceSummaryCommand = /** @class */ (function (_super) {
    __extends(GetComplianceSummaryCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetComplianceSummaryCommand(input) {
        var _this = 
        // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    GetComplianceSummaryCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "ResourceGroupsTaggingAPIClient";
        var commandName = "GetComplianceSummaryCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetComplianceSummaryInput.filterSensitiveLog,
            outputFilterSensitiveLog: GetComplianceSummaryOutput.filterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetComplianceSummaryCommand.prototype.serialize = function (input, context) {
        return serializeAws_json1_1GetComplianceSummaryCommand(input, context);
    };
    GetComplianceSummaryCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_json1_1GetComplianceSummaryCommand(output, context);
    };
    return GetComplianceSummaryCommand;
}($Command));
export { GetComplianceSummaryCommand };
//# sourceMappingURL=GetComplianceSummaryCommand.js.map